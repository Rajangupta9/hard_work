1. User Registration Insights

SELECT 
    DATE_FORMAT(registration_date, '%Y-%m') AS registration_month,
    COUNT(user_id) AS user_count
FROM Users
WHERE role IN ('student', 'instructor')
  AND registration_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY registration_month
ORDER BY registration_month;

2. Course Engagement


SELECT 
    c.course_name,
    u.name AS instructor_name,
    COUNT(e.enrollment_id) AS enrollment_count
FROM Courses c
JOIN Users u ON c.instructor_id = u.user_id
JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_id, c.course_name, u.name
ORDER BY enrollment_count DESC
LIMIT 5;

3. Assignment Submissions Analysis


SELECT 
    u.user_id,
    u.name
FROM Users u
JOIN Enrollments e ON u.user_id = e.user_id
JOIN Courses c ON e.course_id = c.course_id
LEFT JOIN Assignments a ON c.course_id = a.course_id
LEFT JOIN Submissions s ON a.assignment_id = s.assignment_id AND s.user_id = u.user_id
WHERE c.course_id = 101
GROUP BY u.user_id
HAVING COUNT(DISTINCT a.assignment_id) = COUNT(DISTINCT s.submission_id);

4. Delayed Submissions Report


SELECT 
    u.name AS student_name,
    a.assignment_title,
    s.submission_date,
    a.due_date
FROM Submissions s
JOIN Assignments a ON s.assignment_id = a.assignment_id
JOIN Users u ON s.user_id = u.user_id
WHERE s.submission_date > a.due_date;

5. Student Course Load


SELECT 
    u.user_id,
    u.name,
    COUNT(e.course_id) AS course_count
FROM Users u
JOIN Enrollments e ON u.user_id = e.user_id
WHERE u.role = 'student'
GROUP BY u.user_id
HAVING course_count > 3;


6. Instructor Performance


SELECT 
    u.user_id,
    u.name AS instructor_name,
    AVG(s.grade) AS avg_grade
FROM Courses c
JOIN Users u ON c.instructor_id = u.user_id
JOIN Assignments a ON c.course_id = a.course_id
JOIN Submissions s ON a.assignment_id = s.assignment_id
GROUP BY u.user_id
ORDER BY avg_grade DESC
LIMIT 5;

7. Comments Sentiment Analysis Preparation


SELECT 
    u.name AS user_name,
    c.course_name,
    cm.comment_text,
    cm.comment_date
FROM Comments cm
JOIN Users u ON cm.user_id = u.user_id
JOIN Courses c ON cm.course_id = c.course_id
WHERE cm.comment_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);